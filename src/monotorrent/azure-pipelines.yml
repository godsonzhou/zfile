# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

strategy:
  matrix:
#    linux:
#      imageName: 'ubuntu-latest'
    windows:
      imageName: 'windows-latest'

trigger:
- master
- monotorrent-*

pool:
  vmImage: $(imageName)

variables:
  solution: 'src/MonoTorrent.sln'
  configuration: 'Release'

steps:
# Install some versions so tests can run
# Use .NET Core 5.0
- task: UseDotNet@2
  displayName: 'Install net3_1_x'
  inputs:
    packageType: 'runtime'
    version: '3.1.x'

- task: UseDotNet@2
  displayName: 'Install net5_x'
  inputs:
    packageType: 'runtime'
    version: '5.x'

- task: UseDotNet@2
  displayName: 'Install net6_x'
  inputs:
    packageType: 'runtime'
    version: '6.x'

- task: UseDotNet@2
  displayName: 'Install net7_x'
  inputs:
    packageType: 'runtime'
    version: '7.x'

- task: UseDotNet@2
  displayName: 'Install net8_x'
  inputs:
    packageType: 'runtime'
    version: '8.x'

- task: DotNetCoreCLI@2
  displayName: 'Build'
  inputs:
    command: build
    projects: $(solution)
    arguments: '/p:Configuration=$(configuration)'

- task: DotNetCoreCLI@2
  displayName: 'Run tests'
  inputs:
    command: test
    projects: $(solution)
    arguments: '--maxcpucount:4 --configuration $(configuration) --no-build --collect:"XPlat Code Coverage" --logger "trx"'
    publishTestResults: false
  continueOnError: true

- task: reportgenerator@5
  displayName: 'Coverage report generator'
  inputs:
    reports: '**/coverage.cobertura.xml'
    targetdir: coveragereport
    publishCodeCoverageResults: true

- task: PublishTestResults@2
  displayName: 'Upload test results'
  inputs:
    testResultsFormat: 'VSTest'
    testResultsFiles: '**/*.trx'
    failTaskOnFailedTests: true
